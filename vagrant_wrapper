#!/bin/bash

if [ "$#" -lt 2 ]; then
    echo 'USAGE:'
    echo '  vagrantenv <command> <environment> optional: <machine>'
    exit 1
fi

COMMAND=$1
ENVIRONMENT=$2
MACHINE=$3

if [[ ! -s $PWD'/config/servers/'$ENVIRONMENT'_servers.yml' ]]; then
    echo "ERROR: ${ENVIRONMENT}_servers.yml doesn't exist, please create a the server config for \"${ENVIRONMENT}\" in $PWD/config/servers/"
    exit 1
fi

if [[ ! -s $PWD'/config/ansible/'$ENVIRONMENT'_playbook.yml' ]]; then
    echo "ERROR: ${ENVIRONMENT}_servers.yml doesn't exist, please create a playbook for \"${ENVIRONMENT}\" in $PWD/config/ansible/"
    exit 1
fi

mkdir -p $PWD/$ENVIRONMENT
cp $PWD/Vagrantfile $PWD/$ENVIRONMENT/
export VAGRANT_CWD=$PWD/$ENVIRONMENT

if [[ $COMMAND == 'start' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant up
elif [[ $COMMAND == 'connect' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant ssh $MACHINE
elif [[ $COMMAND == 'status' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant status
elif [[ $COMMAND == 'refresh' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant provision
elif [[ $COMMAND == 'reload' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant reload
elif [[ $COMMAND == 'stop' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant halt
elif [[ $COMMAND == 'destroy' ]]; then
    VAGRANT_ENV=$ENVIRONMENT VAGRANT_LOC=$PWD vagrant destroy --force
    rm -Rf $PWD/$ENVIRONMENT
else
    echo "command not recognized"
    exit 1
fi
